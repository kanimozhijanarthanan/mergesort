import java.util.Random;

public class Merge2 {
    public static Random rand = new Random();
    public static int numTests = 50;
    public static int insertThreshold = 16; // threshold for insertion sort

    public static void main(String[] args) {
        int[] testSizes = {16_000_000, 32_000_000, 64_000_000, 96_000_000, 512_000_000, 1_000_000_000}; // Values of n to test
        for (int size : testSizes) {
            try {
                executeTest(size);
            } catch (OutOfMemoryError e) {
                System.out.println("OutOfMemoryError for n = " + size);
                break;
            }
        }
    }

    public static void executeTest(int n) {
        System.out.println("Running tests for n = " + n);
        Timer timer = new Timer();
        long totalDuration = 0;

        for (int i = 0; i < numTests; i++) {
            int[] array = new int[n];
            int[] worstCaseArray = new int[n];
            generateWorstCaseArray(worstCaseArray, 0, worstCaseArray.length);
            initializeArray(array, worstCaseArray);

            timer.start();
            mergeSort(array);
            timer.stop();
            totalDuration += timer.getDuration();
            System.out.println("Iteration " + (i + 1) + "\t");
        }

        long averageDuration = totalDuration / numTests;
        System.out.println("Average time for n = " + n + ": " + averageDuration + " msec.");
        System.out.println("Memory used: " + timer.getMemoryUsage() + " B");
    }

    // Merge Sort Algorithm Starts here
    public static void mergeSort(int[] array) {
        int[] tempArray = array.clone();
        mergeSort(array, tempArray, 0, array.length);
    }

    private static void mergeSort(int[] array, int[] tempArray, int left, int right) {
        if (right - left < insertThreshold) {
            insertionSort(array, left, right);
            return;
        }

        int middle = (left + right) / 2;
        mergeSort(tempArray, array, left, middle);
        mergeSort(tempArray, array, middle, right);

        if (tempArray[middle - 1] <= tempArray[middle]) {
            System.arraycopy(tempArray, left, array, left, right - left);
            return;
        }

        merge(tempArray, array, left, middle, right);
    }

    private static void merge(int[] tempArray, int[] array, int left, int middle, int right) {
        int i = left, j = middle, k = left;

        while (i < middle && j < right) {
            if (tempArray[i] <= tempArray[j]) {
                array[k++] = tempArray[i++];
            } else {
                array[k++] = tempArray[j++];
            }
        }
        while (i < middle) {
            array[k++] = tempArray[i++];
        }
        while (j < right) {
            array[k++] = tempArray[j++];
        }
    }

    private static void insertionSort(int[] array, int left, int right) {
        for (int i = left; i < right; i++) {
            int key = array[i];
            int j = i - 1;
            while (j >= left && array[j] > key) {
                array[j + 1] = array[j];
                j--;
            }
            array[j + 1] = key;
        }
    }
    // Merge Sort Algorithm Ends here

    public static void generateWorstCaseArray(int[] array, int start, int size) {
        if (size == 1) {
            array[start] = 1;
            return;
        }
        int halfSize = size / 2;
        generateWorstCaseArray(array, start, halfSize);
        generateWorstCaseArray(array, start + halfSize, (size % 2 == 0 ? halfSize : halfSize + 1));
        for (int i = start; i < start + halfSize; i++) {
            array[i] *= 2;
        }
        for (int i = start + halfSize; i < start + size; i++) {
            array[i] = array[i] * 2 - 1;
        }
    }

    public static void initializeArray(int[] array, int[] worstCaseArray) {
        System.arraycopy(worstCaseArray, 0, array, 0, array.length);
    }

    public static class Timer {
        long startTime, endTime, elapsedTime, memoryAvailable, memoryUsed;
        boolean isReady;

        public Timer() {
            startTime = System.currentTimeMillis();
            isReady = false;
        }

        public void start() {
            startTime = System.currentTimeMillis();
            isReady = false;
        }

        public Timer stop() {
            endTime = System.currentTimeMillis();
            elapsedTime = endTime - startTime;
            memoryAvailable = Runtime.getRuntime().totalMemory();
            memoryUsed = memoryAvailable - Runtime.getRuntime().freeMemory();
            isReady = true;
            return this;
        }

        public long getDuration() {
            if (!isReady) {
                stop();
            }
            return elapsedTime;
        }

        public long getMemoryUsage() {
            if (!isReady) {
                stop();
            }
            return memoryUsed;
        }
    }
}

